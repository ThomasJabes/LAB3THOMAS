
Lab3SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000003f6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f32  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095e  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b8  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000024f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061e  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000414  00000000  00000000  00002c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003022  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	1a 01       	movw	r2, r20
  6a:	21 01       	movw	r4, r2
  6c:	28 01       	movw	r4, r16
  6e:	32 01       	movw	r6, r4
  70:	3c 01       	movw	r6, r24
  72:	46 01       	movw	r8, r12
  74:	50 01       	movw	r10, r0

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 ef       	ldi	r30, 0xF6	; 246
  8a:	f3 e0       	ldi	r31, 0x03	; 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 33       	cpi	r26, 0x30	; 48
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>
  98:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  9c:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup>:
#include "SPI/SPI.h"
#include "UART/UART.h"

void setup() {
	// Inicializar SPI como maestro
	spiInit(SPI_MASTER_OSC_DIV16, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	83 e5       	ldi	r24, 0x53	; 83
  ac:	0e 94 02 01 	call	0x204	; 0x204 <spiInit>
	// Inicializar UART para comunicación con la computadora
	SetupUART0(M9600);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <SetupUART0>
	writeTextUART("UART Iniciada\r\n");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	
	// Configurar pines PC0, PC1, PC2, PC3, PC4, PC5 como salida
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5);
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8f 63       	ori	r24, 0x3F	; 63
  c2:	87 b9       	out	0x07, r24	; 7
	// Configurar pines PD5, PD6 como salida
	DDRD |= (1 << DDD5) | (1 << DDD6);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 66       	ori	r24, 0x60	; 96
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	08 95       	ret

000000cc <setLEDs>:
}

void setLEDs(uint8_t value) {
	// Establecer el estado de los LEDs de acuerdo al valor recibido
	PORTC = (value & 0x3F); // Los 6 bits menos significativos para PC0-PC5
  cc:	98 2f       	mov	r25, r24
  ce:	9f 73       	andi	r25, 0x3F	; 63
  d0:	98 b9       	out	0x08, r25	; 8
	PORTD = (PORTD & 0x9F) | ((value & 0xC0) >> 1); // Los 2 bits más significativos para PD5 y PD6
  d2:	2b b1       	in	r18, 0x0b	; 11
  d4:	80 7c       	andi	r24, 0xC0	; 192
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	92 2f       	mov	r25, r18
  de:	9f 79       	andi	r25, 0x9F	; 159
  e0:	89 2b       	or	r24, r25
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	08 95       	ret

000000e6 <loop>:
}

void loop() {
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	2e 97       	sbiw	r28, 0x0e	; 14
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t potValue1, potValue2;
	char buffer[10];  // Buffer para convertir entero a cadena

	// Solicitar valor del primer potenciómetro
	spiWrite(0x01);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <spiWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9c e9       	ldi	r25, 0x9C	; 156
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <loop+0x1e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <loop+0x24>
 10a:	00 00       	nop
	_delay_ms(10);
	potValue1 = spiRead();
 10c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <spiRead>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 110:	4a e0       	ldi	r20, 0x0A	; 10
 112:	be 01       	movw	r22, r28
 114:	6f 5f       	subi	r22, 0xFF	; 255
 116:	7f 4f       	sbci	r23, 0xFF	; 255
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 bc 01 	call	0x378	; 0x378 <__itoa_ncheck>
	
	// Convertir potValue1 a cadena y enviarla
	itoa(potValue1, buffer, 10);
	writeTextUART("Pot1: ");
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	writeTextUART(buffer);
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	writeTextUART("\r\n");
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	
	// Solicitar valor del segundo potenciómetro
	spiWrite(0x02);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 67 01 	call	0x2ce	; 0x2ce <spiWrite>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <loop+0x5a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <loop+0x60>
 146:	00 00       	nop
	_delay_ms(10);
	potValue2 = spiRead();
 148:	0e 94 69 01 	call	0x2d2	; 0x2d2 <spiRead>
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 bc 01 	call	0x378	; 0x378 <__itoa_ncheck>
	
	// Convertir potValue2 a cadena y enviarla
	itoa(potValue2, buffer, 10);
	writeTextUART("Pot2: ");
 15a:	87 e1       	ldi	r24, 0x17	; 23
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	writeTextUART(buffer);
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	writeTextUART("\r\n");
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
	
	// Leer entrada desde UART para controlar los LEDs
	if (UCSR0A & (1<<RXC0)) {  // Si hay datos disponibles en el buffer de recepción
 172:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 176:	88 23       	and	r24, r24
 178:	74 f5       	brge	.+92     	; 0x1d6 <loop+0xf0>
		char inputBuffer[4] = {0};
 17a:	1b 86       	std	Y+11, r1	; 0x0b
 17c:	1c 86       	std	Y+12, r1	; 0x0c
 17e:	1d 86       	std	Y+13, r1	; 0x0d
 180:	1e 86       	std	Y+14, r1	; 0x0e
		uint8_t inputIndex = 0;
 182:	20 e0       	ldi	r18, 0x00	; 0
		while (UCSR0A & (1<<RXC0)) {
 184:	10 c0       	rjmp	.+32     	; 0x1a6 <loop+0xc0>
			char receivedChar = UDR0;
 186:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			if (receivedChar >= '0' && receivedChar <= '9' && inputIndex < 3) {
 18a:	90 ed       	ldi	r25, 0xD0	; 208
 18c:	98 0f       	add	r25, r24
 18e:	9a 30       	cpi	r25, 0x0A	; 10
 190:	50 f4       	brcc	.+20     	; 0x1a6 <loop+0xc0>
 192:	23 30       	cpi	r18, 0x03	; 3
 194:	40 f4       	brcc	.+16     	; 0x1a6 <loop+0xc0>
				inputBuffer[inputIndex++] = receivedChar;
 196:	eb e0       	ldi	r30, 0x0B	; 11
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	e2 0f       	add	r30, r18
 1a0:	f1 1d       	adc	r31, r1
 1a2:	80 83       	st	Z, r24
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
	
	// Leer entrada desde UART para controlar los LEDs
	if (UCSR0A & (1<<RXC0)) {  // Si hay datos disponibles en el buffer de recepción
		char inputBuffer[4] = {0};
		uint8_t inputIndex = 0;
		while (UCSR0A & (1<<RXC0)) {
 1a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1aa:	88 23       	and	r24, r24
 1ac:	64 f3       	brlt	.-40     	; 0x186 <loop+0xa0>
			char receivedChar = UDR0;
			if (receivedChar >= '0' && receivedChar <= '9' && inputIndex < 3) {
				inputBuffer[inputIndex++] = receivedChar;
			}
		}
		if (inputIndex > 0) {
 1ae:	22 23       	and	r18, r18
 1b0:	91 f0       	breq	.+36     	; 0x1d6 <loop+0xf0>
			uint8_t inputValue = atoi(inputBuffer);  // Convertir cadena a entero
 1b2:	ce 01       	movw	r24, r28
 1b4:	0b 96       	adiw	r24, 0x0b	; 11
 1b6:	0e 94 9e 01 	call	0x33c	; 0x33c <atoi>
			setLEDs(inputValue);  // Actualizar LEDs
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <setLEDs>
			writeTextUART("Valor recibido: ");
 1be:	8e e1       	ldi	r24, 0x1E	; 30
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
			writeTextUART(inputBuffer);
 1c6:	ce 01       	movw	r24, r28
 1c8:	0b 96       	adiw	r24, 0x0b	; 11
 1ca:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
			writeTextUART("\r\n");
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 85 01 	call	0x30a	; 0x30a <writeTextUART>
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	23 ed       	ldi	r18, 0xD3	; 211
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	91 50       	subi	r25, 0x01	; 1
 1de:	20 40       	sbci	r18, 0x00	; 0
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <loop+0xf6>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <loop+0x100>
 1e6:	00 00       	nop
		}
	}
	
	_delay_ms(1000);
}
 1e8:	2e 96       	adiw	r28, 0x0e	; 14
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:

int main(void) {
	setup();
 1fa:	0e 94 52 00 	call	0xa4	; 0xa4 <setup>
	while (1) {
		loop();
 1fe:	0e 94 73 00 	call	0xe6	; 0xe6 <loop>
 202:	fd cf       	rjmp	.-6      	; 0x1fe <main+0x4>

00000204 <spiInit>:
{
	if (SPSR & (1<<SPIF))
	return 1;
	else
	return 0;
}
 204:	e8 2f       	mov	r30, r24
 206:	84 ff       	sbrs	r24, 4
 208:	52 c0       	rjmp	.+164    	; 0x2ae <spiInit+0xaa>
 20a:	84 b1       	in	r24, 0x04	; 4
 20c:	8c 62       	ori	r24, 0x2C	; 44
 20e:	84 b9       	out	0x04, r24	; 4
 210:	84 b1       	in	r24, 0x04	; 4
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	84 b9       	out	0x04, r24	; 4
 216:	8c b5       	in	r24, 0x2c	; 44
 218:	80 61       	ori	r24, 0x10	; 16
 21a:	8c bd       	out	0x2c, r24	; 44
 21c:	e7 70       	andi	r30, 0x07	; 7
 21e:	8e 2f       	mov	r24, r30
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	87 30       	cpi	r24, 0x07	; 7
 224:	91 05       	cpc	r25, r1
 226:	08 f0       	brcs	.+2      	; 0x22a <spiInit+0x26>
 228:	4b c0       	rjmp	.+150    	; 0x2c0 <spiInit+0xbc>
 22a:	fc 01       	movw	r30, r24
 22c:	ec 5c       	subi	r30, 0xCC	; 204
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	0c 94 98 01 	jmp	0x330	; 0x330 <__tablejump2__>
 234:	8c b5       	in	r24, 0x2c	; 44
 236:	8c 7f       	andi	r24, 0xFC	; 252
 238:	8c bd       	out	0x2c, r24	; 44
 23a:	8d b5       	in	r24, 0x2d	; 45
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	8d bd       	out	0x2d, r24	; 45
 240:	3f c0       	rjmp	.+126    	; 0x2c0 <spiInit+0xbc>
 242:	8c b5       	in	r24, 0x2c	; 44
 244:	8c 7f       	andi	r24, 0xFC	; 252
 246:	8c bd       	out	0x2c, r24	; 44
 248:	8d b5       	in	r24, 0x2d	; 45
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	8d bd       	out	0x2d, r24	; 45
 24e:	38 c0       	rjmp	.+112    	; 0x2c0 <spiInit+0xbc>
 250:	8c b5       	in	r24, 0x2c	; 44
 252:	81 60       	ori	r24, 0x01	; 1
 254:	8c bd       	out	0x2c, r24	; 44
 256:	8c b5       	in	r24, 0x2c	; 44
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	8c bd       	out	0x2c, r24	; 44
 25c:	8d b5       	in	r24, 0x2d	; 45
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	8d bd       	out	0x2d, r24	; 45
 262:	2e c0       	rjmp	.+92     	; 0x2c0 <spiInit+0xbc>
 264:	8c b5       	in	r24, 0x2c	; 44
 266:	81 60       	ori	r24, 0x01	; 1
 268:	8c bd       	out	0x2c, r24	; 44
 26a:	8c b5       	in	r24, 0x2c	; 44
 26c:	8d 7f       	andi	r24, 0xFD	; 253
 26e:	8c bd       	out	0x2c, r24	; 44
 270:	8d b5       	in	r24, 0x2d	; 45
 272:	8e 7f       	andi	r24, 0xFE	; 254
 274:	8d bd       	out	0x2d, r24	; 45
 276:	24 c0       	rjmp	.+72     	; 0x2c0 <spiInit+0xbc>
 278:	8c b5       	in	r24, 0x2c	; 44
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	8c bd       	out	0x2c, r24	; 44
 27e:	8c b5       	in	r24, 0x2c	; 44
 280:	82 60       	ori	r24, 0x02	; 2
 282:	8c bd       	out	0x2c, r24	; 44
 284:	8d b5       	in	r24, 0x2d	; 45
 286:	81 60       	ori	r24, 0x01	; 1
 288:	8d bd       	out	0x2d, r24	; 45
 28a:	1a c0       	rjmp	.+52     	; 0x2c0 <spiInit+0xbc>
 28c:	8c b5       	in	r24, 0x2c	; 44
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	8c bd       	out	0x2c, r24	; 44
 292:	8c b5       	in	r24, 0x2c	; 44
 294:	82 60       	ori	r24, 0x02	; 2
 296:	8c bd       	out	0x2c, r24	; 44
 298:	8d b5       	in	r24, 0x2d	; 45
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	8d bd       	out	0x2d, r24	; 45
 29e:	10 c0       	rjmp	.+32     	; 0x2c0 <spiInit+0xbc>
 2a0:	8c b5       	in	r24, 0x2c	; 44
 2a2:	83 60       	ori	r24, 0x03	; 3
 2a4:	8c bd       	out	0x2c, r24	; 44
 2a6:	8d b5       	in	r24, 0x2d	; 45
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	8d bd       	out	0x2d, r24	; 45
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <spiInit+0xbc>
 2ae:	84 b1       	in	r24, 0x04	; 4
 2b0:	80 61       	ori	r24, 0x10	; 16
 2b2:	84 b9       	out	0x04, r24	; 4
 2b4:	84 b1       	in	r24, 0x04	; 4
 2b6:	83 7d       	andi	r24, 0xD3	; 211
 2b8:	84 b9       	out	0x04, r24	; 4
 2ba:	8c b5       	in	r24, 0x2c	; 44
 2bc:	8f 7e       	andi	r24, 0xEF	; 239
 2be:	8c bd       	out	0x2c, r24	; 44
 2c0:	8c b5       	in	r24, 0x2c	; 44
 2c2:	46 2b       	or	r20, r22
 2c4:	24 2b       	or	r18, r20
 2c6:	28 2b       	or	r18, r24
 2c8:	20 64       	ori	r18, 0x40	; 64
 2ca:	2c bd       	out	0x2c, r18	; 44
 2cc:	08 95       	ret

000002ce <spiWrite>:
 2ce:	8e bd       	out	0x2e, r24	; 46
 2d0:	08 95       	ret

000002d2 <spiRead>:

uint8_t spiRead() // Read the received data
{
	while (!(SPSR & (1<<SPIF))); // Wait for Data Receive complete
 2d2:	0d b4       	in	r0, 0x2d	; 45
 2d4:	07 fe       	sbrs	r0, 7
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <spiRead>
	return (SPDR); // Read the received data from the buffer
 2d8:	8e b5       	in	r24, 0x2e	; 46
}
 2da:	08 95       	ret

000002dc <SetupUART0>:
#include "UART.h"

void SetupUART0(uint8_t MODO) {
	if (MODO == M9600) {
 2dc:	81 11       	cpse	r24, r1
 2de:	14 c0       	rjmp	.+40     	; 0x308 <SetupUART0+0x2c>
		// Paso 1: RX como entrada y TX como salida
		DDRD &= ~(1<<DDD0);
 2e0:	8a b1       	in	r24, 0x0a	; 10
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	8a b9       	out	0x0a, r24	; 10
		DDRD |= (1<<DDD1);
 2e6:	8a b1       	in	r24, 0x0a	; 10
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	8a b9       	out	0x0a, r24	; 10

		// Paso 2: Configuración UCSR0A
		UCSR0A = 0;
 2ec:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

		// Paso 3: Configuración UCSR0B, habilitamos RX y TX
		UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 2f0:	88 e1       	ldi	r24, 0x18	; 24
 2f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

		// Paso 4: Configuración UCSR0C, Asíncrono, paridad: None, 1 bit de stop, 8 bits de datos
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

		// Paso 5: Configuración velocidad de baudrate: 9600
		UBRR0 = 103;
 2fc:	87 e6       	ldi	r24, 0x67	; 103
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 304:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 308:	08 95       	ret

0000030a <writeTextUART>:
	}
}

void writeTextUART(char *Texto) {
 30a:	bc 01       	movw	r22, r24
	for (int i = 0; Texto[i] != '\0'; i++) {
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	08 c0       	rjmp	.+16     	; 0x322 <writeTextUART+0x18>
		while (!(UCSR0A & (1<<UDRE0)));
 312:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 316:	95 ff       	sbrs	r25, 5
 318:	fc cf       	rjmp	.-8      	; 0x312 <writeTextUART+0x8>
		UDR0 = Texto[i];
 31a:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		UBRR0 = 103;
	}
}

void writeTextUART(char *Texto) {
	for (int i = 0; Texto[i] != '\0'; i++) {
 31e:	2f 5f       	subi	r18, 0xFF	; 255
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	fb 01       	movw	r30, r22
 324:	e2 0f       	add	r30, r18
 326:	f3 1f       	adc	r31, r19
 328:	40 81       	ld	r20, Z
 32a:	41 11       	cpse	r20, r1
 32c:	f2 cf       	rjmp	.-28     	; 0x312 <writeTextUART+0x8>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
}
 32e:	08 95       	ret

00000330 <__tablejump2__>:
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	05 90       	lpm	r0, Z+
 336:	f4 91       	lpm	r31, Z
 338:	e0 2d       	mov	r30, r0
 33a:	09 94       	ijmp

0000033c <atoi>:
 33c:	fc 01       	movw	r30, r24
 33e:	88 27       	eor	r24, r24
 340:	99 27       	eor	r25, r25
 342:	e8 94       	clt
 344:	21 91       	ld	r18, Z+
 346:	20 32       	cpi	r18, 0x20	; 32
 348:	e9 f3       	breq	.-6      	; 0x344 <atoi+0x8>
 34a:	29 30       	cpi	r18, 0x09	; 9
 34c:	10 f0       	brcs	.+4      	; 0x352 <atoi+0x16>
 34e:	2e 30       	cpi	r18, 0x0E	; 14
 350:	c8 f3       	brcs	.-14     	; 0x344 <atoi+0x8>
 352:	2b 32       	cpi	r18, 0x2B	; 43
 354:	41 f0       	breq	.+16     	; 0x366 <atoi+0x2a>
 356:	2d 32       	cpi	r18, 0x2D	; 45
 358:	39 f4       	brne	.+14     	; 0x368 <atoi+0x2c>
 35a:	68 94       	set
 35c:	04 c0       	rjmp	.+8      	; 0x366 <atoi+0x2a>
 35e:	0e 94 c7 01 	call	0x38e	; 0x38e <__mulhi_const_10>
 362:	82 0f       	add	r24, r18
 364:	91 1d       	adc	r25, r1
 366:	21 91       	ld	r18, Z+
 368:	20 53       	subi	r18, 0x30	; 48
 36a:	2a 30       	cpi	r18, 0x0A	; 10
 36c:	c0 f3       	brcs	.-16     	; 0x35e <atoi+0x22>
 36e:	1e f4       	brtc	.+6      	; 0x376 <atoi+0x3a>
 370:	90 95       	com	r25
 372:	81 95       	neg	r24
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	08 95       	ret

00000378 <__itoa_ncheck>:
 378:	bb 27       	eor	r27, r27
 37a:	4a 30       	cpi	r20, 0x0A	; 10
 37c:	31 f4       	brne	.+12     	; 0x38a <__itoa_ncheck+0x12>
 37e:	99 23       	and	r25, r25
 380:	22 f4       	brpl	.+8      	; 0x38a <__itoa_ncheck+0x12>
 382:	bd e2       	ldi	r27, 0x2D	; 45
 384:	90 95       	com	r25
 386:	81 95       	neg	r24
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__utoa_common>

0000038e <__mulhi_const_10>:
 38e:	7a e0       	ldi	r23, 0x0A	; 10
 390:	97 9f       	mul	r25, r23
 392:	90 2d       	mov	r25, r0
 394:	87 9f       	mul	r24, r23
 396:	80 2d       	mov	r24, r0
 398:	91 0d       	add	r25, r1
 39a:	11 24       	eor	r1, r1
 39c:	08 95       	ret

0000039e <__utoa_ncheck>:
 39e:	bb 27       	eor	r27, r27

000003a0 <__utoa_common>:
 3a0:	fb 01       	movw	r30, r22
 3a2:	55 27       	eor	r21, r21
 3a4:	aa 27       	eor	r26, r26
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	aa 1f       	adc	r26, r26
 3ac:	a4 17       	cp	r26, r20
 3ae:	10 f0       	brcs	.+4      	; 0x3b4 <__utoa_common+0x14>
 3b0:	a4 1b       	sub	r26, r20
 3b2:	83 95       	inc	r24
 3b4:	50 51       	subi	r21, 0x10	; 16
 3b6:	b9 f7       	brne	.-18     	; 0x3a6 <__utoa_common+0x6>
 3b8:	a0 5d       	subi	r26, 0xD0	; 208
 3ba:	aa 33       	cpi	r26, 0x3A	; 58
 3bc:	08 f0       	brcs	.+2      	; 0x3c0 <__utoa_common+0x20>
 3be:	a9 5d       	subi	r26, 0xD9	; 217
 3c0:	a1 93       	st	Z+, r26
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	79 f7       	brne	.-34     	; 0x3a4 <__utoa_common+0x4>
 3c6:	b1 11       	cpse	r27, r1
 3c8:	b1 93       	st	Z+, r27
 3ca:	11 92       	st	Z+, r1
 3cc:	cb 01       	movw	r24, r22
 3ce:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <strrev>

000003d2 <strrev>:
 3d2:	dc 01       	movw	r26, r24
 3d4:	fc 01       	movw	r30, r24
 3d6:	67 2f       	mov	r22, r23
 3d8:	71 91       	ld	r23, Z+
 3da:	77 23       	and	r23, r23
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <strrev+0x4>
 3de:	32 97       	sbiw	r30, 0x02	; 2
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <strrev+0x18>
 3e2:	7c 91       	ld	r23, X
 3e4:	6d 93       	st	X+, r22
 3e6:	70 83       	st	Z, r23
 3e8:	62 91       	ld	r22, -Z
 3ea:	ae 17       	cp	r26, r30
 3ec:	bf 07       	cpc	r27, r31
 3ee:	c8 f3       	brcs	.-14     	; 0x3e2 <strrev+0x10>
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
