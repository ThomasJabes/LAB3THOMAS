
lab3Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1b  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f1  00000000  00000000  00001785  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b8  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	59 00       	.word	0x0059	; ????
  6a:	64 00       	.word	0x0064	; ????
  6c:	72 00       	.word	0x0072	; ????
  6e:	80 00       	.word	0x0080	; ????
  70:	8e 00       	.word	0x008e	; ????
  72:	9c 00       	.word	0x009c	; ????
  74:	aa 00       	.word	0x00aa	; ????
  76:	b3 00       	.word	0x00b3	; ????
  78:	1f 01       	movw	r2, r30
  7a:	26 01       	movw	r4, r12
  7c:	2d 01       	movw	r4, r26
  7e:	37 01       	movw	r6, r14
  80:	41 01       	movw	r8, r2
  82:	4b 01       	movw	r8, r22
  84:	55 01       	movw	r10, r10

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61
  92:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  96:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <SetupADC>:
#include "ADC.h"

void SetupADC(uint8_t PinADC){
	switch (PinADC)
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	91 05       	cpc	r25, r1
  a4:	08 f0       	brcs	.+2      	; 0xa8 <SetupADC+0xa>
  a6:	67 c0       	rjmp	.+206    	; 0x176 <SetupADC+0xd8>
  a8:	fc 01       	movw	r30, r24
  aa:	ec 5c       	subi	r30, 0xCC	; 204
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__tablejump2__>
	{
		case PC0 :
		DIDR0 |= (1<<ADC0D);
  b2:	ee e7       	ldi	r30, 0x7E	; 126
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	80 83       	st	Z, r24
		break;
  c6:	57 c0       	rjmp	.+174    	; 0x176 <SetupADC+0xd8>
		case PC1 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX0);
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC1D);
  d8:	ee e7       	ldi	r30, 0x7E	; 126
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
		break;
  e2:	49 c0       	rjmp	.+146    	; 0x176 <SetupADC+0xd8>
		case PC2 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  e4:	ec e7       	ldi	r30, 0x7C	; 124
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX1);
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC2D);
  f4:	ee e7       	ldi	r30, 0x7E	; 126
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	80 83       	st	Z, r24
		break;
  fe:	3b c0       	rjmp	.+118    	; 0x176 <SetupADC+0xd8>
		case PC3 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX0)|(1<<MUX1);
 10a:	80 81       	ld	r24, Z
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC3D);
 110:	ee e7       	ldi	r30, 0x7E	; 126
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 60       	ori	r24, 0x08	; 8
 118:	80 83       	st	Z, r24
		break;
 11a:	2d c0       	rjmp	.+90     	; 0x176 <SetupADC+0xd8>
		case PC4 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2);
 126:	80 81       	ld	r24, Z
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC4D);
 12c:	ee e7       	ldi	r30, 0x7E	; 126
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 61       	ori	r24, 0x10	; 16
 134:	80 83       	st	Z, r24
		break;
 136:	1f c0       	rjmp	.+62     	; 0x176 <SetupADC+0xd8>
		case PC5 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 138:	ec e7       	ldi	r30, 0x7C	; 124
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 7f       	andi	r24, 0xF8	; 248
 140:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX0);
 142:	80 81       	ld	r24, Z
 144:	85 60       	ori	r24, 0x05	; 5
 146:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC5D);
 148:	ee e7       	ldi	r30, 0x7E	; 126
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	80 83       	st	Z, r24
		break;
 152:	11 c0       	rjmp	.+34     	; 0x176 <SetupADC+0xd8>
		case PC6 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1);
 15e:	80 81       	ld	r24, Z
 160:	86 60       	ori	r24, 0x06	; 6
 162:	80 83       	st	Z, r24
		break;
 164:	08 c0       	rjmp	.+16     	; 0x176 <SetupADC+0xd8>
		case PC7 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 7f       	andi	r24, 0xF8	; 248
 16e:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 170:	80 81       	ld	r24, Z
 172:	87 60       	ori	r24, 0x07	; 7
 174:	80 83       	st	Z, r24
		break;
	}
	// JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	80 83       	st	Z, r24
	// REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	80 83       	st	Z, r24
	// PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 190:	80 81       	ld	r24, Z
 192:	87 60       	ori	r24, 0x07	; 7
 194:	80 83       	st	Z, r24
	// HABILITAR
	ADCSRA |= (1<<ADEN);
 196:	80 81       	ld	r24, Z
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <setup>:
#include "SPI/SPI.h"
#include "ADC/ADC.h"

void setup() {
	// Inicializar SPI como esclavo
	spiInit(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	0e 94 07 01 	call	0x20e	; 0x20e <spiInit>
	// Inicializar ADC para leer los valores de los potenciómetros
	SetupADC(PC4); // A4
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	0e 94 4f 00 	call	0x9e	; 0x9e <SetupADC>
	SetupADC(PC5); // A5
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	0e 94 4f 00 	call	0x9e	; 0x9e <SetupADC>
 1b6:	08 95       	ret

000001b8 <readADC>:
}

uint8_t readADC(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 1b8:	ec e7       	ldi	r30, 0x7C	; 124
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	90 81       	ld	r25, Z
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	89 2b       	or	r24, r25
 1c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 1c6:	ea e7       	ldi	r30, 0x7A	; 122
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 1d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1d4:	86 fd       	sbrc	r24, 6
 1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <readADC+0x18>
	return ADCH;
 1d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1dc:	08 95       	ret

000001de <main>:

int main(void) {
	setup();
 1de:	0e 94 cf 00 	call	0x19e	; 0x19e <setup>
	uint8_t potValue1, potValue2;
	
	while (1) {
		if (spiDataReady()) {
 1e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <spiDataReady>
 1e6:	89 2b       	or	r24, r25
 1e8:	e1 f3       	breq	.-8      	; 0x1e2 <main+0x4>
			uint8_t command = spiRead();
 1ea:	0e 94 77 01 	call	0x2ee	; 0x2ee <spiRead>
			if (command == 0x01) {
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	31 f4       	brne	.+12     	; 0x1fe <main+0x20>
				potValue1 = readADC(PC4); // Leer potenciómetro en A4
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <readADC>
				spiWrite(potValue1);
 1f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <spiWrite>
 1fc:	f2 cf       	rjmp	.-28     	; 0x1e2 <main+0x4>
				} else if (command == 0x02) {
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	81 f7       	brne	.-32     	; 0x1e2 <main+0x4>
				potValue2 = readADC(PC5); // Leer potenciómetro en A5
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <readADC>
				spiWrite(potValue2);
 208:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <spiWrite>
 20c:	ea cf       	rjmp	.-44     	; 0x1e2 <main+0x4>

0000020e <spiInit>:
*/

#include "SPI.h"

void spiInit(Spi_Type sType, Spi_Data_Order sDataOrder, Spi_Clock_Polarity sClockPolarity, Spi_Clock_Phase sClockPhase)
{
 20e:	e8 2f       	mov	r30, r24
	// PB2 -> SS
	// PB3 -> MOSI
	// PB4 -> MISO
	// PB5 -> SCK

	if (sType & (1<<MSTR)) // If Master Mode
 210:	84 ff       	sbrs	r24, 4
 212:	52 c0       	rjmp	.+164    	; 0x2b8 <spiInit+0xaa>
	{
		DDRB |= (1<<DDB3)|(1<<DDB5)|(1<<DDB2);  // MOSI, SCK, negado_SS
 214:	84 b1       	in	r24, 0x04	; 4
 216:	8c 62       	ori	r24, 0x2C	; 44
 218:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<DDB4);                     // MISO
 21a:	84 b1       	in	r24, 0x04	; 4
 21c:	8f 7e       	andi	r24, 0xEF	; 239
 21e:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1<<MSTR);                      // Master
 220:	8c b5       	in	r24, 0x2c	; 44
 222:	80 61       	ori	r24, 0x10	; 16
 224:	8c bd       	out	0x2c, r24	; 44

		uint8_t temp = sType & 0b00000111;
 226:	e7 70       	andi	r30, 0x07	; 7

		switch (temp){
 228:	8e 2f       	mov	r24, r30
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	87 30       	cpi	r24, 0x07	; 7
 22e:	91 05       	cpc	r25, r1
 230:	08 f0       	brcs	.+2      	; 0x234 <spiInit+0x26>
 232:	4b c0       	rjmp	.+150    	; 0x2ca <spiInit+0xbc>
 234:	fc 01       	movw	r30, r24
 236:	e4 5c       	subi	r30, 0xC4	; 196
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__tablejump2__>
			case 0: // DIV2
			SPCR &= ~((1<<SPR1)|(1<<SPR0));
 23e:	8c b5       	in	r24, 0x2c	; 44
 240:	8c 7f       	andi	r24, 0xFC	; 252
 242:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 244:	8d b5       	in	r24, 0x2d	; 45
 246:	81 60       	ori	r24, 0x01	; 1
 248:	8d bd       	out	0x2d, r24	; 45
			break;
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <spiInit+0xbc>
			case 1: // DIV4
			SPCR &= ~((1<<SPR1)|(1<<SPR0));
 24c:	8c b5       	in	r24, 0x2c	; 44
 24e:	8c 7f       	andi	r24, 0xFC	; 252
 250:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 252:	8d b5       	in	r24, 0x2d	; 45
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	8d bd       	out	0x2d, r24	; 45
			break;
 258:	38 c0       	rjmp	.+112    	; 0x2ca <spiInit+0xbc>

			case 2: // DIV8
			SPCR |= (1<<SPR0);
 25a:	8c b5       	in	r24, 0x2c	; 44
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	8c bd       	out	0x2c, r24	; 44
			SPCR &= ~(1<<SPR1);
 260:	8c b5       	in	r24, 0x2c	; 44
 262:	8d 7f       	andi	r24, 0xFD	; 253
 264:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 266:	8d b5       	in	r24, 0x2d	; 45
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	8d bd       	out	0x2d, r24	; 45
			break;
 26c:	2e c0       	rjmp	.+92     	; 0x2ca <spiInit+0xbc>

			case 3: // DIV16
			SPCR |= (1<<SPR0);
 26e:	8c b5       	in	r24, 0x2c	; 44
 270:	81 60       	ori	r24, 0x01	; 1
 272:	8c bd       	out	0x2c, r24	; 44
			SPCR &= ~(1<<SPR1);
 274:	8c b5       	in	r24, 0x2c	; 44
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 27a:	8d b5       	in	r24, 0x2d	; 45
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	8d bd       	out	0x2d, r24	; 45
			break;
 280:	24 c0       	rjmp	.+72     	; 0x2ca <spiInit+0xbc>

			case 4: // DIV32
			SPCR &= ~(1<<SPR0);
 282:	8c b5       	in	r24, 0x2c	; 44
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (1<<SPR1);
 288:	8c b5       	in	r24, 0x2c	; 44
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 28e:	8d b5       	in	r24, 0x2d	; 45
 290:	81 60       	ori	r24, 0x01	; 1
 292:	8d bd       	out	0x2d, r24	; 45
			break;
 294:	1a c0       	rjmp	.+52     	; 0x2ca <spiInit+0xbc>

			case 5: // DIV64
			SPCR &= ~(1<<SPR0);
 296:	8c b5       	in	r24, 0x2c	; 44
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (1<<SPR1);
 29c:	8c b5       	in	r24, 0x2c	; 44
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 2a2:	8d b5       	in	r24, 0x2d	; 45
 2a4:	8e 7f       	andi	r24, 0xFE	; 254
 2a6:	8d bd       	out	0x2d, r24	; 45
			break;
 2a8:	10 c0       	rjmp	.+32     	; 0x2ca <spiInit+0xbc>
			case 6: // DIV128
			SPCR |= (1<<SPR0)|(1<<SPR1);
 2aa:	8c b5       	in	r24, 0x2c	; 44
 2ac:	83 60       	ori	r24, 0x03	; 3
 2ae:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 2b0:	8d b5       	in	r24, 0x2d	; 45
 2b2:	8e 7f       	andi	r24, 0xFE	; 254
 2b4:	8d bd       	out	0x2d, r24	; 45
			break;
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <spiInit+0xbc>
		}
	}
	else // If Slave Mode
	{
		DDRB |= (1<<DDB4);                              // MISO
 2b8:	84 b1       	in	r24, 0x04	; 4
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)| (1<<DDB2)); // MOSI, SCK, SS
 2be:	84 b1       	in	r24, 0x04	; 4
 2c0:	83 7d       	andi	r24, 0xD3	; 211
 2c2:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR);                             // Slave
 2c4:	8c b5       	in	r24, 0x2c	; 44
 2c6:	8f 7e       	andi	r24, 0xEF	; 239
 2c8:	8c bd       	out	0x2c, r24	; 44
	}
	// Enable Data Order, Clock Polarity, Clock Phase
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 2ca:	8c b5       	in	r24, 0x2c	; 44
 2cc:	46 2b       	or	r20, r22
 2ce:	24 2b       	or	r18, r20
 2d0:	28 2b       	or	r18, r24
 2d2:	20 64       	ori	r18, 0x40	; 64
 2d4:	2c bd       	out	0x2c, r18	; 44
 2d6:	08 95       	ret

000002d8 <spiWrite>:
	while (!(SPSR & (1<<SPIF))); // Wait for Data Receive complete
}

void spiWrite(uint8_t dat) // Write data to SPI bus
{
	SPDR = dat;
 2d8:	8e bd       	out	0x2e, r24	; 46
 2da:	08 95       	ret

000002dc <spiDataReady>:
}

unsigned spiDataReady() // Check whether the data is ready to read
{
	if (SPSR & (1<<SPIF))
 2dc:	0d b4       	in	r0, 0x2d	; 45
 2de:	07 fe       	sbrs	r0, 7
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <spiDataReady+0xc>
	return 1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret
	else
	return 0;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
}
 2ec:	08 95       	ret

000002ee <spiRead>:

uint8_t spiRead() // Read the received data
{
	while (!(SPSR & (1<<SPIF))); // Wait for Data Receive complete
 2ee:	0d b4       	in	r0, 0x2d	; 45
 2f0:	07 fe       	sbrs	r0, 7
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <spiRead>
	return (SPDR); // Read the received data from the buffer
 2f4:	8e b5       	in	r24, 0x2e	; 46
}
 2f6:	08 95       	ret

000002f8 <__tablejump2__>:
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	05 90       	lpm	r0, Z+
 2fe:	f4 91       	lpm	r31, Z
 300:	e0 2d       	mov	r30, r0
 302:	09 94       	ijmp

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
